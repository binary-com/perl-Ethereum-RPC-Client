#!/usr/bin/env perl

use strict;
use warnings;

use Test::More;
use JSON::MaybeXS;

use Ethereum::RPC::Client;

my $rpc_client = Ethereum::RPC::Client->new;

my $test_address = '0xd1aa52637fdc1d2b7f0c8b33c0fc954ef3e71f72';
my $abi          = [{
        "inputs" => [{
                "internalType" => "address",
                "name"         => "_address",
                "type"         => "address"
            },
            {
                "internalType" => "string",
                "name"         => "_string",
                "type"         => "string"
            },
            {
                "internalType" => "string[]",
                "name"         => "_string_array",
                "type"         => "string[]"
            },
            {
                "internalType" => "string[4]",
                "name"         => "_string_fixed_array",
                "type"         => "string[4]"
            },
            {
                "internalType" => "bytes10[2]",
                "name"         => "_bytes_fixed_array",
                "type"         => "bytes10[2]"
            },
            {
                "internalType" => "bytes[]",
                "name"         => "_bytes",
                "type"         => "bytes[]"
            }
        ],
        "name"            => "changeOwner",
        "outputs"         => [],
        "stateMutability" => "nonpayable",
        "type"            => "function"
    }];

my $remix_abi_encode =
    "000000000000000000000000d1aa52637fdc1d2b7f0c8b33c0fc954ef3e71f7200000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000200313233343536373839300000000000000000000000000000000000000000000031323334353637383930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000b61627261636164616272610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004616272610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076361646162726100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c

my $contract = $rpc_client->contract({
    contract_abi => encode_json($abi),
    from         => $test_address,
    gas          => 4000000,
    gas_price    => 10
});

my $encoded = $contract->encode(
    "changeOwner", '0xd1aa52637fdc1d2b7f0c8b33c0fc954ef3e71f72',
    'abracadabra',
    ["abra",       "cadabra"],
    ["ab",         "ra", "cada", "bra"],
    ["1234567890", "1234567890"],
    ["0x11",       "0x11"]);

is $encoded, $remix_abi_encode, "correct encoded abi";

done_testing;

